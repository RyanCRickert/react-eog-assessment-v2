{"version":3,"sources":["store/actions.js","store/sagas/ApiErrors.js","store/sagas/index.js","store/reducers/Weather.js","components/Chip.js","components/Weather.js","components/Header.js","components/Wrapper.js","components/Spinner/Spinner.js","components/ActiveMetric/ActiveMetric.js","components/GraphPlot.js","App.js","store/index.js","serviceWorker.js","index.js"],"names":["API_ERROR","apiErrorReceived","watchApiError","action","regenerator_default","a","wrap","_context","prev","next","call","toast","error","concat","stop","_marked","_context2","takeEvery","actions","_marked2","ApiErrors","sagas","Object","toConsumableArray","initialState","temperatureinCelsius","temperatureinFahrenheit","description","locationName","handlers","defineProperty","state","c","getWeatherForLocation","reducers_Weather","arguments","length","undefined","handler","type","withStyles","theme","root","background","palette","secondary","main","label","color","primary","Chip","client","createClient","url","getWeather","_state$weather","weather","components_Weather","react_default","createElement","urql_es","value","Weather_Weather","Weather","getLocation","useGeolocation","latLong","latitude","longitude","dispatch","useDispatch","_useSelector","useSelector","_useQuery","useQuery","query","variables","result","slicedToArray","fetching","data","useEffect","message","LinearProgress","components_Chip","useStyles","makeStyles","grow","flexGrow","Header","classes","AppBar","position","Toolbar","Typography","variant","className","wrapper","height","Wrapper","_ref","children","Spinner","ActiveMetric","props","metric","unit","PlotlyComponent","createPlotlyComponent","Plotly","subscription","gql","_templateObject","getMetric","helperArray","requestBody","fetch","method","body","JSON","stringify","headers","Content-Type","then","res","json","resData","errors","Error","target","getMeasurements","i","unshift","at","moment","format","catch","err","console","log","Graph","_useState","useState","_useState2","flareTempArray","setFlareTempArray","_useState3","_useState4","oilTempArray","setOilTempArray","_useState5","_useState6","waterTempArray","setWaterTempArray","_useState7","_useState8","tubingPressureArray","setTubingPressureArray","_useState9","_useState10","casingPressureArray","setCasingPressureArray","_useState11","_useState12","injValveOpenArray","setInjValveOpenArray","_useState13","_useState14","metricsArray","setMetricsArray","_useState15","_useState16","newOil","setNewOil","_useState17","_useState18","newWater","setNewWater","_useState19","_useState20","newFlare","setNewFlare","_useState21","_useState22","newCasing","setNewCasing","_useState23","_useState24","newTubing","setNewTubing","_useState25","_useState26","newValve","setNewValve","fullArray","keys","truthyArray","forEach","item","push","getMetrics","buildDataObject","array","atArray","valueArray","Fragment","react_apollo_esm","loading","newValue","newOilArray","shift","newWaterArray","newFlareArray","newTubingArray","newCasingArray","newInjArray","updateMetrics","newMeasurement","oilTempObj","waterTempObj","flareTempObj","casingPressureObj","tubingPressureObj","injValveOpenObj","oilTemp","waterTemp","flareTemp","casingPressure","tubingPressure","injValveOpen","plotData","x","y","name","hoverlabel","namelength","marker","components_Spinner_Spinner","GraphPlot_PlotlyComponent","layout","title","xaxis","nticks","config","showLink","displayModeBar","style","width","display","prop","map","key","httpLink","createHttpLink","uri","wsLink","WebSocketLink","options","reconnect","link","split","definition","getMainDefinition","kind","operation","ApolloClient","cache","InMemoryCache","store","rootReducer","combineReducers","weatherReducer","composeEnhancers","composeWithDevTools","sagaMiddleware","createSagaMiddleware","middlewares","applyMiddleware","createStore","run","createMuiTheme","typography","useNextVariants","App","setOilTemp","setFlareTemp","setWaterTemp","setTubingPressure","setCasingPressure","setInjValueOpen","handleToggleMetric","setter","MuiThemeProvider","CssBaseline","es","onClick","GraphPlot","lib","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5a35613a.chunk.js","sourcesContent":["export const API_ERROR = \"EVENT/API_ERROR_RECEIVED\";\r\nexport const WEATHER_DATA_RECEIVED = \"EVENT/WEATHER_DATA_RECEIVED\";\r\n","import { takeEvery, call } from \"redux-saga/effects\";\r\nimport * as actions from \"../actions\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nfunction* apiErrorReceived(action) {\r\n  yield call(toast.error, `Error Received: ${action.error}`);\r\n}\r\n\r\nfunction* watchApiError() {\r\n  yield takeEvery(actions.API_ERROR, apiErrorReceived);\r\n}\r\n\r\nexport default [watchApiError];\r\n","import ApiErrors from \"./ApiErrors\";\r\n\r\nexport default [...ApiErrors];\r\n","import * as actions from \"../actions\";\r\n\r\nconst initialState = {\r\n  temperatureinCelsius: null,\r\n  temperatureinFahrenheit: null,\r\n  description: \"\",\r\n  locationName: \"\"\r\n};\r\n\r\nconst toF = c => (c * 9) / 5 + 32;\r\n\r\nconst weatherDataRecevied = (state, action) => {\r\n  const { getWeatherForLocation } = action;\r\n  const {\r\n    description,\r\n    locationName,\r\n    temperatureinCelsius\r\n  } = getWeatherForLocation;\r\n\r\n  return {\r\n    temperatureinCelsius,\r\n    temperatureinFahrenheit: toF(temperatureinCelsius),\r\n    description,\r\n    locationName\r\n  };\r\n};\r\n\r\nconst handlers = {\r\n  [actions.WEATHER_DATA_RECEIVED]: weatherDataRecevied\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  const handler = handlers[action.type];\r\n  if (typeof handler === \"undefined\") return state;\r\n  return handler(state, action);\r\n};\r\n","import Chip from \"@material-ui/core/Chip\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nconst cardStyles = theme => ({\r\n  root: {\r\n    background: theme.palette.secondary.main\r\n  },\r\n  label: {\r\n    color: theme.palette.primary.main\r\n  }\r\n});\r\nexport default withStyles(cardStyles)(Chip);\r\n","import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport * as actions from \"../store/actions\";\r\nimport { Provider, createClient, useQuery } from \"urql\";\r\nimport { useGeolocation } from \"react-use\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\nimport Chip from \"./Chip\";\r\n\r\nconst client = createClient({\r\n  url: \"https://react.eogresources.com/graphql\"\r\n});\r\n\r\nconst query = `\r\nquery($latLong: WeatherQuery!) {\r\n  getWeatherForLocation(latLong: $latLong) {\r\n    description\r\n    locationName\r\n    temperatureinCelsius\r\n  }\r\n}\r\n`;\r\n\r\nconst getWeather = state => {\r\n  const { temperatureinFahrenheit, description, locationName } = state.weather;\r\n  return {\r\n    temperatureinFahrenheit,\r\n    description,\r\n    locationName\r\n  };\r\n};\r\n\r\nexport default () => {\r\n  return (\r\n    <Provider value={client}>\r\n      <Weather />\r\n    </Provider>\r\n  );\r\n};\r\n\r\nconst Weather = () => {\r\n  const getLocation = useGeolocation();\r\n  // Default to houston\r\n  const latLong = {\r\n    latitude: getLocation.latitude || 29.7604,\r\n    longitude: getLocation.longitude || -95.3698\r\n  };\r\n  const dispatch = useDispatch();\r\n  const { temperatureinFahrenheit, description, locationName } = useSelector(\r\n    getWeather\r\n  );\r\n\r\n  const [result] = useQuery({\r\n    query,\r\n    variables: {\r\n      latLong\r\n    }\r\n  });\r\n  const { fetching, data, error } = result;\r\n  useEffect(\r\n    () => {\r\n      if (error) {\r\n        dispatch({ type: actions.API_ERROR, error: error.message });\r\n        return;\r\n      }\r\n      if (!data) return;\r\n      const { getWeatherForLocation } = data;\r\n      dispatch({ type: actions.WEATHER_DATA_RECEIVED, getWeatherForLocation });\r\n    },\r\n    [dispatch, data, error]\r\n  );\r\n\r\n  if (fetching) return <LinearProgress />;\r\n\r\n  return (\r\n    <Chip\r\n      label={`Weather in ${locationName}: ${description} and ${temperatureinFahrenheit}°`}\r\n    />\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Weather from \"./Weather\";\r\n\r\nconst useStyles = makeStyles({\r\n  grow: {\r\n    flexGrow: 1\r\n  }\r\n});\r\n\r\nexport default () => {\r\n  const classes = useStyles();\r\n\r\n  const name = \"Ryan's\";\r\n  return (\r\n    <AppBar position=\"static\">\r\n      <Toolbar>\r\n        <Typography variant=\"h6\" color=\"inherit\" className={classes.grow}>\r\n          {name} EOG React Visualization Assessment\r\n        </Typography>\r\n        <Weather />\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  wrapper: {\r\n    background: theme.palette.background.main,\r\n    height: \"100vh\"\r\n  }\r\n}));\r\n\r\nexport default ({ children }) => {\r\n  const classes = useStyles();\r\n  return <div className={classes.wrapper}>{children}</div>;\r\n};\r\n","import React from \"react\";\r\nimport \"./spinner.css\";\r\n\r\n\r\nconst Spinner = () => (\r\n  <div className=\"spinner\">\r\n    <div className=\"lds-default\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>\r\n  </div>\r\n)\r\n\r\nexport default Spinner;","import React from \"react\";\r\n\r\nimport \"./activeMetric.css\";\r\n\r\nexport default props => {\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"header\">\r\n        {props.metric}\r\n      </div>\r\n      <div className=\"body\">\r\n        {props.value} {props.unit}\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { Subscription } from \"react-apollo\";\r\nimport { gql } from \"apollo-boost\";\r\nimport * as moment from \"moment\";\r\nimport createPlotlyComponent from \"react-plotlyjs\";\r\nimport Plotly from \"plotly.js/dist/plotly-cartesian\";\r\n\r\nimport Spinner from \"./Spinner/Spinner\";\r\nimport ActiveMetric from \"./ActiveMetric/ActiveMetric\";\r\n\r\nconst PlotlyComponent = createPlotlyComponent(Plotly);\r\n\r\nconst subscription = gql`\r\nsubscription {\r\n  newMeasurement {\r\n    metric\r\n    value\r\n    at\r\n  }\r\n}\r\n`;\r\n\r\nconst getMetric = (metric, helperArray) => {\r\n  const requestBody = {\r\n    query: `\r\n      query getMeasurements($metric: String!) {\r\n        getMeasurements(input: {metricName : $metric}) {\r\n          metric\r\n          at\r\n          value\r\n        }\r\n      }\r\n    `,\r\n    variables: {\r\n      metric\r\n    }\r\n  };\r\n\r\n    fetch(\"https://react.eogresources.com/graphql\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify(requestBody),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    }).then(res => {\r\n      return res.json();\r\n    }).then(resData => {\r\n      if(resData.errors) {\r\n        throw new Error(resData.errors[0].message)\r\n      }\r\n\r\n      const target = [];\r\n      const call = resData.data.getMeasurements;\r\n\r\n      for(let i = call.length -1; i >= call.length -1500; i--) {\r\n        target.unshift({\r\n          at: moment(call[i].at).format(\"MMM DD H:mm:ss A\"),\r\n          value: call[i].value\r\n        });\r\n      }\r\n      return helperArray(target);\r\n    })\r\n    .catch(err => {\r\n      console.log(err);\r\n    })\r\n}\r\n\r\nconst Graph = props => {\r\n\r\n  const [ flareTempArray , setFlareTempArray ] = useState();\r\n  const [ oilTempArray , setOilTempArray ] = useState();\r\n  const [ waterTempArray , setWaterTempArray ] = useState();\r\n  const [ tubingPressureArray , setTubingPressureArray ] = useState();\r\n  const [ casingPressureArray , setCasingPressureArray ] = useState();\r\n  const [ injValveOpenArray , setInjValveOpenArray ] = useState();\r\n  const [ metricsArray, setMetricsArray] = useState([]);\r\n  const [ newOil, setNewOil ] = useState();\r\n  const [ newWater, setNewWater ] = useState();\r\n  const [ newFlare, setNewFlare ] = useState();\r\n  const [ newCasing, setNewCasing ] = useState();\r\n  const [ newTubing, setNewTubing ] = useState();\r\n  const [ newValve, setNewValve ] = useState();\r\n\r\n  const fetchAll = () => {\r\n    getMetric(\"flareTemp\", setFlareTempArray);\r\n    getMetric(\"oilTemp\", setOilTempArray);\r\n    getMetric(\"waterTemp\", setWaterTempArray);\r\n    getMetric(\"tubingPressure\", setTubingPressureArray);\r\n    getMetric(\"casingPressure\", setCasingPressureArray);\r\n    getMetric(\"injValveOpen\", setInjValveOpenArray);\r\n  }\r\n\r\n  useEffect(() => {\r\n    const getMetrics = () => {\r\n      const fullArray = Object.keys(props);\r\n      const truthyArray = [];\r\n  \r\n      fullArray.forEach(item => {\r\n        if(props[item]) {\r\n          truthyArray.push(item);\r\n        }\r\n      })\r\n  \r\n      setMetricsArray(truthyArray);\r\n    }\r\n\r\n    fetchAll();\r\n    getMetrics();\r\n  }, [props])\r\n\r\n  const updateMetrics = data => {\r\n    const newValue = {\r\n      at: moment(data.at).format(\"MMM DD H:mm:ss A\"),\r\n      value: data.value\r\n    }\r\n    \r\n    switch(data.metric) {\r\n      case \"oilTemp\":\r\n        if(oilTempArray) {\r\n          const newOilArray = oilTempArray;\r\n          newOilArray.push(newValue);\r\n          newOilArray.shift();\r\n          setNewOil(data.value);\r\n          return setOilTempArray(newOilArray);\r\n        }\r\n        break;\r\n      case \"waterTemp\":\r\n        if(waterTempArray) {\r\n          const newWaterArray = waterTempArray;\r\n          newWaterArray.push(newValue);\r\n          newWaterArray.shift();\r\n          setNewWater(data.value);\r\n          return setWaterTempArray(newWaterArray);\r\n        }\r\n        break;\r\n      case \"flareTemp\":\r\n        if(flareTempArray) {\r\n          const newFlareArray = flareTempArray;\r\n          newFlareArray.push(newValue);\r\n          newFlareArray.shift();\r\n          setNewFlare(data.value);\r\n          return setFlareTempArray(newFlareArray);\r\n        }\r\n        break;\r\n      case \"tubingPressure\":\r\n        if(tubingPressureArray) {\r\n          const newTubingArray = tubingPressureArray;\r\n          newTubingArray.push(newValue);\r\n          newTubingArray.shift();\r\n          setNewTubing(data.value);\r\n          return setTubingPressureArray(newTubingArray);\r\n        }\r\n        break;\r\n      case \"casingPressure\":\r\n        if(casingPressureArray) {\r\n          const newCasingArray = casingPressureArray;\r\n          newCasingArray.push(newValue);\r\n          newCasingArray.shift();\r\n          setNewCasing(data.value);\r\n          return setCasingPressureArray(newCasingArray);\r\n        }\r\n        break;\r\n      case \"injValveOpen\":\r\n        if(injValveOpenArray) {\r\n          const newInjArray = injValveOpenArray;\r\n          newInjArray.push(newValue);\r\n          newInjArray.shift();\r\n          setNewValve(data.value);\r\n          return setInjValveOpenArray(newInjArray);\r\n        }\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  const buildDataObject = array => {\r\n    const atArray = [];\r\n    const valueArray = [];\r\n\r\n    array.forEach(item => {\r\n      atArray.push(item[\"at\"]);\r\n      valueArray.push(item[\"value\"])\r\n    })\r\n\r\n    return {\r\n      at: atArray,\r\n      value: valueArray\r\n    };\r\n  }\r\n\r\n  const showActiveMetrics = () => {\r\n    const newestValues = [\r\n      {metric: \"Oil Temp\", value: newOil, prop: \"oilTemp\", unit: \"°F\"},\r\n      {metric: \"Flare Temp\", value: newFlare, prop: \"flareTemp\", unit: \"°F\"},\r\n      {metric: \"Water Temp\", value: newWater, prop: \"waterTemp\", unit: \"°F\"},\r\n      {metric: \"Casing Pressure\", value: newCasing, prop: \"casingPressure\", unit: \"PSI\"},\r\n      {metric: \"Tubing Pressure\", value: newTubing, prop: \"tubingPressure\", unit: \"PSI\"},\r\n      {metric: \"Injector Valve Open\", value: newValve, prop: \"injValveOpen\", unit: \"%\"}\r\n    ];\r\n\r\n    return (\r\n      newestValues.map(item => {\r\n        if(props[item[\"prop\"]]){\r\n         return <ActiveMetric key={item[\"metric\"]} metric={item[\"metric\"]} value={item[\"value\"]} unit={item[\"unit\"]}/>\r\n        } else {\r\n          return null\r\n        }\r\n      })\r\n    )\r\n  }\r\n    \r\n  return (\r\n    <React.Fragment>\r\n      <Subscription subscription={subscription}>\r\n        {({ loading,  data}) => {\r\n          if(!loading) {\r\n            updateMetrics(data.newMeasurement)\r\n          }\r\n          \r\n          var oilTempObj = {};\r\n          var waterTempObj = {};\r\n          var flareTempObj = {};\r\n          var casingPressureObj = {};\r\n          var tubingPressureObj = {};\r\n          var injValveOpenObj = {};\r\n          \r\n\r\n          if(oilTempArray && props.oilTemp) {\r\n            oilTempObj = buildDataObject(oilTempArray)\r\n          }\r\n\r\n          if(waterTempArray && props.waterTemp) {\r\n            waterTempObj = buildDataObject(waterTempArray)\r\n          }\r\n\r\n          if(flareTempArray && props.flareTemp) {\r\n            flareTempObj = buildDataObject(flareTempArray)\r\n          }\r\n\r\n          if(casingPressureArray && props.casingPressure) {\r\n            casingPressureObj = buildDataObject(casingPressureArray)\r\n          }\r\n\r\n          if(tubingPressureArray && props.tubingPressure) {\r\n            tubingPressureObj = buildDataObject(tubingPressureArray)\r\n          }\r\n\r\n          if(injValveOpenArray && props.injValveOpen) {\r\n            injValveOpenObj = buildDataObject(injValveOpenArray)\r\n          }\r\n\r\n          let plotData = [\r\n            {\r\n              type: \"scattergl\",\r\n              x: oilTempObj.at,\r\n              y: oilTempObj.value,\r\n              name: \"Oil Temp (°F)\",\r\n              hoverlabel: {\r\n                namelength: 30\r\n              },\r\n              marker: {\r\n                color: \"rgb(0, 0, 0)\"\r\n              }\r\n            },\r\n            {\r\n              type: \"scatter\",\r\n              x: waterTempObj.at,\r\n              y: waterTempObj.value,\r\n              name: \"Water Temp (°F)\",\r\n              hoverlabel: {\r\n                namelength: 30\r\n              },\r\n              marker: {\r\n                color: \"rgb(135, 206, 250)\"\r\n              }\r\n            },{\r\n              type: \"scatter\",\r\n              x: flareTempObj.at,\r\n              y: flareTempObj.value,\r\n              name: \"Flare Temp (°F)\",\r\n              hoverlabel: {\r\n                namelength: 30\r\n              },\r\n              marker: {\r\n                color: \"rgb(250, 100, 115)\"\r\n              }\r\n            },{\r\n              type: \"scatter\",\r\n              x: casingPressureObj.at,\r\n              y: casingPressureObj.value,\r\n              name: \"Casing Pressure (PSI)\",\r\n              hoverlabel: {\r\n                namelength: 30\r\n              },\r\n              marker: {\r\n                color: \"rgb(50, 104, 243)\"\r\n              }\r\n            },\r\n            {\r\n              type: \"scatter\",\r\n              x: tubingPressureObj.at,\r\n              y: tubingPressureObj.value,\r\n              name: \"Tubing Pressure (PSI)\",\r\n              hoverlabel: {\r\n                namelength: 30\r\n              },\r\n              marker: {\r\n                color: \"rgb(204, 206, 43)\"\r\n              }\r\n            },{\r\n              type: \"scatter\",\r\n              x: injValveOpenObj.at,\r\n              y: injValveOpenObj.value,\r\n              name: \"Injector Valve Open (%)\",\r\n              hoverlabel: {\r\n                namelength: 30\r\n              },\r\n              marker: {\r\n                color: \"rgb(250, 206, 43)\"\r\n              }\r\n            }\r\n          ];\r\n          let layout = {\r\n            title: \"Metric Tracker\",\r\n            xaxis: {\r\n              nticks: 20\r\n            },\r\n            height: 700,\r\n          };\r\n          let config = {\r\n            showLink: false,\r\n            displayModeBar: true\r\n          };\r\n\r\n          return (\r\n            <div>\r\n            {loading ?\r\n            <Spinner /> :\r\n            metricsArray.length !== 0 ?\r\n            <PlotlyComponent className=\"whatever\" data={plotData} layout={layout} config={config}/> :\r\n            <div>No data selected</div>}\r\n            </div>\r\n          )\r\n        }}\r\n      </Subscription>\r\n      <div style={{width: \"100%\", display: \"flex\"}}>\r\n        {showActiveMetrics()}\r\n      </div>\r\n      </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default Graph;","import React, { useState } from \"react\";\r\nimport createStore from \"./store\";\r\nimport { Provider } from \"react-redux\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport { MuiThemeProvider, createMuiTheme } from \"@material-ui/core/styles\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport Header from \"./components/Header\";\r\nimport Wrapper from \"./components/Wrapper\";\r\nimport GraphPlot from \"./components/GraphPlot\";\r\nimport { ApolloProvider } from 'react-apollo'\r\nimport { ApolloClient } from 'apollo-client';\r\nimport { createHttpLink } from 'apollo-link-http';\r\nimport { InMemoryCache } from 'apollo-cache-inmemory';\r\nimport { split } from 'apollo-link';\r\nimport { WebSocketLink } from 'apollo-link-ws';\r\nimport { getMainDefinition } from 'apollo-utilities';\r\n\r\nconst httpLink = createHttpLink({\r\n  uri: 'https://react.eogresources.com/graphql'\r\n});\r\n\r\nconst wsLink = new WebSocketLink({\r\n  uri: `ws://react.eogresources.com/graphql`,\r\n  options: {\r\n    reconnect: true\r\n  }\r\n});\r\n\r\nconst link = split(\r\n  ({ query }) => {\r\n    const definition = getMainDefinition(query);\r\n    return (\r\n      definition.kind === 'OperationDefinition' &&\r\n      definition.operation === 'subscription'\r\n    );\r\n  },\r\n  wsLink,\r\n  httpLink,\r\n);\r\n\r\nconst client = new ApolloClient({\r\n  link: link,\r\n  cache: new InMemoryCache()\r\n});\r\n\r\nconst store = createStore();\r\nconst theme = createMuiTheme({\r\n  typography: {\r\n    useNextVariants: true\r\n  },\r\n  palette: {\r\n    primary: {\r\n      main: \"rgb(39,49,66)\"\r\n    },\r\n    secondary: {\r\n      main: \"rgb(197,208,222)\"\r\n    },\r\n    background: {\r\n      main: \"rgb(226,231,238)\"\r\n    }\r\n  }\r\n});\r\n\r\n\r\nconst App = props => {\r\n  const [oilTemp, setOilTemp] = useState(false);\r\n  const [flareTemp, setFlareTemp] = useState(false);\r\n  const [waterTemp, setWaterTemp] = useState(false);\r\n  const [tubingPressure, setTubingPressure] = useState(false);\r\n  const [casingPressure, setCasingPressure] = useState(false);\r\n  const [injValveOpen, setInjValueOpen] = useState(false);\r\n\r\n  const handleToggleMetric = (metric, setter) => {\r\n    setter(!metric)\r\n  }\r\n  \r\n  return (\r\n  <MuiThemeProvider theme={theme}>\r\n    <CssBaseline />\r\n    <ApolloProvider client={client}>\r\n    <Provider store={store}>\r\n      <Wrapper>\r\n        <Header />\r\n        <button onClick={() => handleToggleMetric(oilTemp, setOilTemp)}>Toggle oil</button>\r\n        <button onClick={() => handleToggleMetric(waterTemp, setWaterTemp)}>Toggle water</button>\r\n        <button onClick={() => handleToggleMetric(flareTemp, setFlareTemp)}>Toggle flare</button>\r\n        <button onClick={() => handleToggleMetric(tubingPressure, setTubingPressure)}>Toggle tube</button>\r\n        <button onClick={() => handleToggleMetric(casingPressure, setCasingPressure)}>Toggle case</button>\r\n        <button onClick={() => handleToggleMetric(injValveOpen, setInjValueOpen)}>Toggle valve</button>\r\n        <GraphPlot\r\n          oilTemp={oilTemp}\r\n          flareTemp={flareTemp}\r\n          waterTemp={waterTemp}\r\n          tubingPressure={tubingPressure}\r\n          casingPressure={casingPressure}\r\n          injValveOpen={injValveOpen}\r\n        />\r\n        <ToastContainer />\r\n      </Wrapper>\r\n    </Provider>\r\n    </ApolloProvider>\r\n  </MuiThemeProvider>\r\n  )\r\n};\r\n\r\nexport default App;","import { createStore, applyMiddleware, combineReducers } from \"redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport sagas from \"./sagas\";\r\nimport weatherReducer from \"./reducers/Weather\";\r\n\r\nexport default () => {\r\n  const rootReducer = combineReducers({\r\n    weather: weatherReducer\r\n  });\r\n\r\n  const composeEnhancers = composeWithDevTools({});\r\n  const sagaMiddleware = createSagaMiddleware();\r\n  const middlewares = applyMiddleware(sagaMiddleware);\r\n  const store = createStore(rootReducer, composeEnhancers(middlewares));\r\n\r\n  sagas.forEach(sagaMiddleware.run);\r\n\r\n  return store;\r\n};\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}